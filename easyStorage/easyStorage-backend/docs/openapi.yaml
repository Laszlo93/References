openapi: 3.0.0
info:
  title: EasyStorage API
  version: 1.0.0
  description: An API for a storage system
servers:
  - url: http://localhost:3000
    description: URL for local testing
paths:
  /api/login:
    post:
      summary: Login user
      tags:
        - auth
      requestBody:
        required: true
        content: 
          application/json:
            schema: 
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
                  userData: 
                    $ref: '#/components/schemas/userData'
        '401':
          description: Username or password invalid
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/refresh:
    post:
      summary: Refresh access token
      tags:
        - auth
      requestBody:
        required: true
        content: 
          application/json:
            schema: 
              type: object
              properties:
                token:
                  type: string
      responses:
        '200':
          description: Access token refreshed succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  userData: 
                    $ref: '#/components/schemas/userData'
        '400':
          description: There is no refresh token
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/logout:
    post:
      summary: Logout user
      tags:
        - auth
      requestBody:
        required: true
        content: 
          application/json:
            schema: 
              type: object
              properties:
                token:
                  type: string
      responses:
        '200':
          description: Logout successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  userData: 
                    $ref: '#/components/schemas/userData'
        '400':
          description: There is no refresh token
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: User does not have access rights to the content
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Could not find a user
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/items/add:
    post: 
      security:
        - bearerAuth: []
      summary: Create a new item
      tags:
        - item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '201':
          description: Item has been succesfully created
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/Item'
        '400':
          description: Invalid request body
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500': 
          description: Internal server error
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/items/items-list:
    get:
      summary: Return a list of all items
      tags:
        - item
      responses: 
        '200': 
          description: List of all items returned succesfully
          content: 
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        '500': 
          description: Internal server error
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/items/export:
    get:
      summary: Return a list of all items to export
      tags:
        - item
      responses: 
        '200': 
          description: List of all items to export returned succesfully
          content: 
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/ExportedItem'
        '500': 
          description: Internal server error
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/items/{itemID}:
    get:
      security:
          - bearerAuth: []
      summary: Return the item with given ID
      tags:
        - item
      parameters:
        - name: itemID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Item return succesfully
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/Item'
        '404':
          description: Item with given ID not found
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500': 
          description: Internal server error
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put: 
      security:
        - bearerAuth: []
      summary: Updates an item with given ID
      tags:
        - item
      parameters:
        - name: itemID
          in: path
          required: true
          schema:
            type: string 
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              type: array
              items:
                $ref: '#/components/schemas/Item'
      responses:
        '200':
          description: Item data updated succesfully
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/Item'
        '404':
          description: Item with given ID not found
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500': 
          description: Internal server error
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      security:
        - bearerAuth: []
      summary: Delete an item with a given ID
      tags:
        - item
      parameters:
        - name: itemID
          in: path
          required: true
          schema:
            type: string 
      responses:
        '200':
          description: Item data deleted succesfully
          content: 
            application/json:
              schema: 
                type: object
        '404':
          description: Item with given ID not found
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500': 
          description: Internal server error
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/users/add:
    post: 
      security:
        - bearerAuth: []
      summary: Create a new person
      tags:
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User has been succesfully created
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request body
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500': 
          description: Internal server error
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 
  /api/users/users-list:
    get:
      security:
        - bearerAuth: []
      summary: Return a list of all users
      tags:
        - user
      responses: 
        '200': 
          description: List of all users returned succesfully
          content: 
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500': 
          description: Internal server error
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/users/{userID}:
    get:
      security:
          - bearerAuth: []
      summary: Return the user with given ID
      tags:
        - user
      parameters:
        - name: userID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User data return succesfully
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/User'
        '404':
          description: User with given ID not found
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500': 
          description: Internal server error
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put: 
      security:
        - bearerAuth: []
      summary: Updates a user with given ID
      tags:
        - user
      parameters:
        - name: userID
          in: path
          required: true
          schema:
            type: string 
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User data updated succesfully
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/User'
        '404':
          description: User with given ID not found
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500': 
          description: Internal server error
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      security:
        - bearerAuth: []
      summary: Deletes a user with a given ID
      tags:
        - user
      parameters:
        - name: userID
          in: path
          required: true
          schema:
            type: string 
      responses:
        '200':
          description: User data deleted succesfully
          content: 
            application/json:
              schema: 
                type: object
        '404':
          description: User with given ID not found
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500': 
          description: Internal server error
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/history/add:
    post: 
      security:
        - bearerAuth: []
      summary: Add a new item to history
      tags:
        - history
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/History'
      responses:
        '201':
          description: History item has been succesfully created
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/History'
        '400':
          description: Invalid request body
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500': 
          description: Internal server error
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 
  /api/history:
    get:
      security:
        - bearerAuth: []
      summary: Return a selected number of history items
      tags:
        - history
      responses: 
        '200': 
          description: List a selected number of history items returned succesfully
          content: 
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/History'
        '500': 
          description: Internal server error
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/history/filtered:
    get:
      summary: Return filtered history items
      tags:
        - history
      responses: 
        '200': 
          description: List filtered history items returned succesfully
          content: 
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/History'
        '500': 
          description: Internal server error
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
tags:
  - name: user
    description: Access users
  - name: item
    description: Access items
  - name: history
    description: Access history 
  - name: auth
    description: Authentication handling
  
                    
components:
  schemas:
    User: 
      type: object
      required: 
        - firstName
        - lastName
        - username
        - password
        - position
      properties:
        firstName:
          type: string
        lastName: 
          type: string
        username: 
          type: string
        password: 
          type: string
        position: 
          type: string
        isAdmin: 
          type: boolean
    Item: 
      type: object
      required: 
        - name
        - drawingNumber
        - storage
        - position
      properties:
        name:
          type: string
        drawingNumber: 
          type: string
        customerDrawingNumber: 
          type: string
        storage: 
          type: object
          required: 
            - storageName
            - shelf
          properties:
            storageName:
              type: string
            shelf: 
              type: boolean
            box: 
              type: number
        position: 
          type: string
        isAdmin: 
          type: boolean
    ExportedItem: 
      type: object
      required: 
        - name
        - drawingNumber
        - customerDrawingNumber
        - storageName
        - shelf
        - box
        - quantity
      properties:
        name:
          type: string
        drawingNumber: 
          type: string
        customerDrawingNumber: 
          type: string
        storageName:
          type: string
        shelf: 
          type: number
        box: 
          oneOf:
            - type: string
            - type: number
        quantity: 
          type: number
    History: 
      type: object
      required: 
        - username
        - action
        - name
        - drawingNumber
        - quantityOfChange
      properties:
        username:
          type: string
        action: 
          type: string
        itemName: 
          type: string
        drawingNumber: 
          type: string
        quantityOfChange: 
          type: string
    userData: 
      type: object
      required: 
        - username
        - name
        - user_id
        - isAdmin
      properties:
        username:
          type: string
        name: 
          type: string
        user_id: 
          type: string
        isAdmin: 
          type: boolean
    Error:
      type: object
      required: 
        - has_error
        - message
      properties:
        has_error:
          type: boolean
        message: 
          type: string
          
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      
    
    
    
    
    
    
    
    
    
    
  